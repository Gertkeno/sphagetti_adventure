const w4 = @import("wasm4.zig");
const std = @import("std");

const Roach = @import("Roach.zig");
const Point = @import("Point.zig");
const Rect = @import("Rect.zig");

const Self = @This();

area: Rect = .{
    .x = 70,
    .y = 0,
    .w = 20,
    .h = 32,
},

dir: Point = Point.one,
timer: u16 = 0,
health: u8 = 18,
invincible: u8 = 0,

pub fn take_damage(self: *Self, dmg: u8) void {
    if (!self.is_vulnerable())
        return;

    if (self.health > dmg) {
        self.health -= dmg;
    } else {
        self.health = 0;
    }

    self.invincible = 50;

    // use the timer to get a semi-random direction to go after taking damage
    const xflip: i8 = @intFromBool(self.timer & 0b1010 == 0);
    const yflip: i8 = @intFromBool(self.timer & 0b1001 == 0);
    self.dir = Point{
        .x = xflip * 2 - 1,
        .y = yflip * 2 - 1,
    };
}

pub fn is_vulnerable(self: Self) bool {
    return self.invincible == 0;
}

pub fn is_alive(self: Self) bool {
    return self.health > 0;
}

pub fn update(self: *Self) void {
    self.timer +%= 1;

    // don't move while invincible
    if (self.invincible > 0) {
        self.invincible -= 1;
    } else {
        self.area.x += self.dir.x;
        self.area.y += self.dir.y;
    }

    // if we hit a left/right wall change direction to bounce off of it.
    if (self.area.x < 0) {
        self.area.x = 0;
        self.dir.x = 1;
    } else if (self.area.x + self.area.w > 160) {
        self.area.x = 160 - self.area.w;
        self.dir.x = -1;
    }

    // if we hit a top/bottom wall change direction to bounce off of it.
    if (self.area.y < 0) {
        self.area.y = 0;
        self.dir.y = 1;
    } else if (self.area.y + self.area.h > 160) {
        self.area.y = 160 - self.area.h;
        self.dir.y = -1;
    }
}

pub fn draw(self: Self) void {
    // picks the first or second animated frame to use
    const frame: u8 = @intFromBool(self.timer & 0b1000 == 0);

    const invincible_flash = self.invincible & 0b110 == 0;
    if (invincible_flash) {
        w4.DRAW_COLORS.* = 0x2410;
        w4.blitSub(&rhombus, self.area.x, self.area.y, self.area.w, self.area.h, frame * 20, 0, 40, rhombus_flags);
    }
}

const rhombus_flags = 1; // BLIT_2BPP
const rhombus = [320]u8{ 0x00, 0x28, 0x28, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x22, 0x22, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x02, 0xa6, 0xa0, 0x00, 0x00, 0x02, 0xa6, 0xa0, 0x00, 0x00, 0x0a, 0x55, 0x68, 0x00, 0x00, 0x0a, 0x55, 0x68, 0x00, 0x00, 0x29, 0x55, 0x5a, 0x00, 0x00, 0x29, 0x55, 0x5a, 0x00, 0x00, 0x25, 0x55, 0x56, 0x80, 0x00, 0x25, 0x55, 0x56, 0x80, 0x00, 0x27, 0x57, 0x55, 0x80, 0x00, 0x27, 0x57, 0x55, 0x80, 0x00, 0x27, 0xdf, 0x55, 0xa0, 0x00, 0x27, 0xdf, 0x55, 0xa0, 0x00, 0x27, 0x57, 0x55, 0xa0, 0x00, 0x27, 0x57, 0x55, 0x60, 0x00, 0x95, 0x75, 0x55, 0x60, 0x00, 0x95, 0x75, 0x55, 0x60, 0x00, 0x95, 0x55, 0x57, 0x68, 0xc0, 0x95, 0x55, 0x57, 0x68, 0x00, 0x9d, 0x55, 0xdd, 0x58, 0x3c, 0x9d, 0x55, 0xdd, 0x58, 0x03, 0xd7, 0x77, 0x75, 0xd8, 0x03, 0xd7, 0x77, 0x75, 0xd8, 0x3f, 0x95, 0xdd, 0xd5, 0xd8, 0x00, 0x95, 0xdd, 0xd7, 0xd8, 0xf0, 0x95, 0x55, 0x55, 0xd8, 0x00, 0x95, 0x55, 0x7d, 0x58, 0x00, 0x95, 0x55, 0x7f, 0x58, 0x00, 0x95, 0x55, 0xd5, 0x58, 0x00, 0x95, 0x55, 0xf5, 0x58, 0xc0, 0x95, 0x55, 0x55, 0x58, 0x00, 0x95, 0x55, 0x55, 0x78, 0x3f, 0x95, 0x55, 0x55, 0x78, 0x00, 0xdd, 0xd5, 0x55, 0x78, 0x00, 0xdd, 0xd5, 0x57, 0xd8, 0x03, 0xd7, 0x77, 0x75, 0xe0, 0x00, 0xd7, 0x77, 0x7d, 0x60, 0x0f, 0x25, 0xdd, 0x57, 0xe0, 0x00, 0x25, 0xdd, 0x55, 0x60, 0x30, 0x25, 0x55, 0x7d, 0x80, 0x00, 0x25, 0x55, 0x55, 0x80, 0x00, 0x09, 0x55, 0x56, 0x00, 0x00, 0x09, 0x55, 0x56, 0x00, 0x00, 0x0a, 0x55, 0x5a, 0x00, 0x00, 0x0a, 0x55, 0x5a, 0x00, 0x00, 0x02, 0xaa, 0xa8, 0x00, 0x00, 0x02, 0xaa, 0xa8, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x02, 0x02, 0x08, 0x00, 0x00, 0xa2, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0xa8, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
